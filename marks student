import customtkinter as ctk
from tkinter import messagebox, simpledialog, Canvas
import json
import os
from datetime import datetime, timedelta
from openpyxl import Workbook
import shutil
import re
import random
import time

# ========== إعدادات الواجهة ==========
ctk.set_appearance_mode("dark")
ctk.set_default_color_theme("blue")

DATA_FILE = "students_data.json"
BACKUP_FILE = "students_data_backup.json"
MAX_GRADES = 100
EDIT_DAYS_LIMIT = 5

# ============================================================
# 🔹 دالة حفظ البيانات
# ============================================================
def save_data(data):
    try:
        if os.path.exists(DATA_FILE):
            shutil.copy(DATA_FILE, BACKUP_FILE)
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, indent=4, ensure_ascii=False)
    except Exception as e:
        messagebox.showerror("خطأ", f"فشل حفظ البيانات: {str(e)}")
        raise

# ============================================================
# 🔹 دالة تحميل البيانات
# ============================================================
def load_data():
    if not os.path.exists(DATA_FILE):
        return {"accounts": []}
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
            if "accounts" not in data:
                data = {"accounts": [data]}  # تحويل هيكل قديم إلى جديد
            return data
    except json.JSONDecodeError:
        messagebox.showerror("خطأ", "ملف البيانات تالف. سيتم إنشاء ملف جديد.")
        return {"accounts": []}
    except Exception as e:
        messagebox.showerror("خطأ", f"فشل تحميل البيانات: {str(e)}")
        return {"accounts": []}

# ============================================================
# 🔹 دالة عرض الألعاب النارية
# ============================================================
def show_fireworks(master, lang):
    popup = ctk.CTkToplevel(master)
    popup.title("الألعاب النارية" if lang == "ar" else "Fireworks")
    screen_width = master.winfo_screenwidth()
    screen_height = master.winfo_screenheight()
    window_width = int(screen_width * 0.5)
    window_height = int(screen_height * 0.5)
    popup.wm_geometry(f"{window_width}x{window_height}+{int((screen_width - window_width) / 2)}+{int((screen_height - window_height) / 2)}")
    popup.transient(master)
    popup.grab_set()

    canvas = Canvas(popup, bg="black", highlightthickness=0)
    canvas.pack(fill="both", expand=True)

    particles = []
    colors = ["red", "yellow", "blue", "green", "purple", "white"]

    def create_particle():
        x = random.randint(50, window_width - 50)
        y = random.randint(50, window_height - 50)
        size = random.randint(5, 15)
        color = random.choice(colors)
        dx = random.uniform(-3, 3)
        dy = random.uniform(-3, 3)
        particle = canvas.create_oval(x, y, x + size, y + size, fill=color)
        return {"id": particle, "dx": dx, "dy": dy, "life": 50}

    def animate():
        nonlocal particles
        if len(particles) < 20:
            particles.append(create_particle())
        new_particles = []
        for p in particles:
            canvas.move(p["id"], p["dx"], p["dy"])
            p["life"] -= 1
            if p["life"] > 0:
                new_particles.append(p)
            else:
                canvas.delete(p["id"])
        particles = new_particles
        if particles:
            popup.after(50, animate)
        else:
            popup.destroy()

    for _ in range(10):
        particles.append(create_particle())
    animate()
    popup.after(3000, popup.destroy)  # إغلاق النافذة بعد 3 ثوانٍ

# ============================================================
# 🔹 واجهة إدارة الحسابات
# ============================================================
class AccountManagerWindow(ctk.CTk):
    def __init__(self, lang="ar"):
        super().__init__()
        self.title("إدارة الحسابات" if lang == "ar" else "Account Manager")
        self.lang = lang
        self.data = load_data()
        self.accounts = self.data.get("accounts", [])

        # ضبط حجم النافذة بناءً على الشاشة
        screen_width = self.winfo_screenwidth()
        screen_height = self.winfo_screenheight()
        window_width = int(screen_width * 0.8)
        window_height = int(screen_height * 0.8)
        self.wm_geometry(f"{window_width}x{window_height}+{int((screen_width - window_width) / 2)}+{int((screen_height - window_height) / 2)}")

        main_frame = ctk.CTkFrame(self, corner_radius=10)
        main_frame.pack(pady=20, padx=20, fill="both", expand=True)

        ctk.CTkLabel(
            main_frame,
            text="إدارة الحسابات" if lang == "ar" else "Manage Accounts",
            font=("Cairo" if lang == "ar" else "Arial", 24, "bold")
        ).pack(pady=15)

        self.account_frame = ctk.CTkScrollableFrame(main_frame, corner_radius=8)
        self.account_frame.pack(pady=10, fill="both", expand=True)

        button_frame = ctk.CTkFrame(main_frame, corner_radius=10)
        button_frame.pack(pady=10, fill="x", padx=10)

        lang_btn = ctk.CTkButton(
            button_frame,
            text="🇬🇧 English" if lang == "ar" else "🇸🇦 العربية",
            font=("Cairo" if lang == "ar" else "Arial", 12),
            command=self.toggle_language,
            fg_color="#0288D1",
            hover_color="#03A9F4",
            corner_radius=8
        )
        lang_btn.pack(side="right" if lang == "ar" else "left", padx=5)

        add_btn = ctk.CTkButton(
            button_frame,
            text="➕ إنشاء حساب جديد" if lang == "ar" else "➕ Create New Account",
            font=("Cairo" if lang == "ar" else "Arial", 14),
            command=self.create_new_account,
            fg_color="#2E7D32",
            hover_color="#4CAF50",
            corner_radius=8
        )
        add_btn.pack(side="right" if lang == "ar" else "left", padx=5)

        self.load_accounts()

    def load_accounts(self):
        for widget in self.account_frame.winfo_children():
            widget.destroy()

        for i, account in enumerate(self.accounts):
            row = ctk.CTkFrame(self.account_frame, corner_radius=5, fg_color="#424242")
            row.pack(fill="x", pady=5, padx=5)

            ctk.CTkLabel(
                row,
                text=f"{i+1}. {account['teacher']} - {account['institute']}",
                font=("Cairo" if self.lang == "ar" else "Arial", 14),
                anchor="w" if self.lang == "ar" else "e"
            ).pack(side="left" if self.lang == "ar" else "right", padx=10, fill="x", expand=True)

            open_btn = ctk.CTkButton(
                row,
                text="📂 فتح" if self.lang == "ar" else "📂 Open",
                width=80,
                command=lambda acc=account: self.open_account(acc)
            )
            open_btn.pack(side="right" if self.lang == "ar" else "left", padx=5)

            delete_btn = ctk.CTkButton(
                row,
                text="🗑️ حذف" if self.lang == "ar" else "🗑️ Delete",
                width=80,
                fg_color="#D32F2F",
                hover_color="#F44336",
                command=lambda idx=i: self.delete_account(idx)
            )
            delete_btn.pack(side="right" if self.lang == "ar" else "left", padx=5)

    def toggle_language(self):
        new_lang = "en" if self.lang == "ar" else "ar"
        self.destroy()
        AccountManagerWindow(new_lang).mainloop()

    def create_new_account(self):
        self.destroy()
        CreateAccountWindow(self.lang).mainloop()

    def open_account(self, account):
        self.destroy()
        StudentWindow(account, self.lang).mainloop()

    def delete_account(self, index):
        if messagebox.askyesno(
            "تأكيد" if self.lang == "ar" else "Confirm",
            "هل تريد حذف هذا الحساب؟" if self.lang == "ar" else "Do you want to delete this account?"
        ):
            del self.accounts[index]
            self.data["accounts"] = self.accounts
            save_data(self.data)
            self.load_accounts()
            messagebox.showinfo(
                "تم" if self.lang == "ar" else "Success",
                "تم حذف الحساب بنجاح." if self.lang == "ar" else "Account deleted successfully."
            )

# ============================================================
# 🔹 واجهة إنشاء الحساب
# ============================================================
class CreateAccountWindow(ctk.CTk):
    def __init__(self, lang="ar"):
        super().__init__()
        self.title("نظام المعهد - إنشاء حساب" if lang == "ar" else "Institute System - Create Account")
        self.lang = lang
        self.data = load_data()
        self.students = []

        # ضبط حجم النافذة بناءً على الشاشة
        screen_width = self.winfo_screenwidth()
        screen_height = self.winfo_screenheight()
        window_width = int(screen_width * 0.8)
        window_height = int(screen_height * 0.8)
        self.wm_geometry(f"{window_width}x{window_height}+{int((screen_width - window_width) / 2)}+{int((screen_height - window_height) / 2)}")

        main_frame = ctk.CTkFrame(self, corner_radius=10)
        main_frame.pack(pady=20, padx=20, fill="both", expand=True)

        ctk.CTkLabel(
            main_frame,
            text="إنشاء حساب أستاذ" if lang == "ar" else "Create Teacher Account",
            font=("Cairo" if lang == "ar" else "Arial", 24, "bold")
        ).pack(pady=15)

        self.name_entry = ctk.CTkEntry(
            main_frame,
            placeholder_text="اسم الأستاذ" if lang == "ar" else "Teacher Name",
            font=("Cairo" if lang == "ar" else "Arial", 14),
            corner_radius=8,
            height=40
        )
        self.name_entry.pack(pady=10, padx=40, fill="x")

        self.inst_entry = ctk.CTkEntry(
            main_frame,
            placeholder_text="اسم المعهد" if lang == "ar" else "Institute Name",
            font=("Cairo" if lang == "ar" else "Arial", 14),
            corner_radius=8,
            height=40
        )
        self.inst_entry.pack(pady=10, padx=40, fill="x")

        button_frame = ctk.CTkFrame(main_frame, corner_radius=10)
        button_frame.pack(pady=10, fill="x", padx=10)

        self.add_students_btn = ctk.CTkButton(
            button_frame,
            text="➕ إضافة الطلاب" if lang == "ar" else "➕ Add Students",
            font=("Cairo" if lang == "ar" else "Arial", 14),
            command=self.open_student_popup,
            fg_color="#2E7D32",
            hover_color="#4CAF50",
            corner_radius=8
        )
        self.add_students_btn.pack(side="right" if lang == "ar" else "left", padx=5)

        self.create_btn = ctk.CTkButton(
            button_frame,
            text="✅ إنشاء الحساب" if lang == "ar" else "✅ Create Account",
            font=("Cairo" if lang == "ar" else "Arial", 14),
            command=self.create_account,
            fg_color="#5E2A7E",
            hover_color="#7B1FA2",
            corner_radius=8
        )
        self.create_btn.pack(side="right" if lang == "ar" else "left", padx=5)

        self.manager_btn = ctk.CTkButton(
            button_frame,
            text="📋 إدارة الحسابات" if lang == "ar" else "📋 Manage Accounts",
            font=("Cairo" if lang == "ar" else "Arial", 14),
            command=self.goto_account_manager,
            fg_color="#0288D1",
            hover_color="#03A9F4",
            corner_radius=8
        )
        self.manager_btn.pack(side="right" if lang == "ar" else "left", padx=5)

        lang_btn = ctk.CTkButton(
            button_frame,
            text="🇬🇧 English" if lang == "ar" else "🇸🇦 العربية",
            font=("Cairo" if lang == "ar" else "Arial", 12),
            command=self.toggle_language,
            fg_color="#0288D1",
            hover_color="#03A9F4",
            corner_radius=8
        )
        lang_btn.pack(side="right" if lang == "ar" else "left", padx=5)

    def toggle_language(self):
        new_lang = "en" if self.lang == "ar" else "ar"
        self.destroy()
        CreateAccountWindow(new_lang).mainloop()

    def goto_account_manager(self):
        if self.data["accounts"]:
            self.destroy()
            AccountManagerWindow(self.lang).mainloop()
        else:
            messagebox.showinfo(
                "تنبيه" if self.lang == "ar" else "Alert",
                "لم يتم إنشاء أي حساب بعد." if self.lang == "ar" else "No accounts have been created yet."
            )

    def open_student_popup(self):
        popup = ctk.CTkToplevel(self)
        popup.title("إدخال أسماء الطلاب" if self.lang == "ar" else "Enter Student Names")
        screen_width = self.winfo_screenwidth()
        screen_height = self.winfo_screenheight()
        window_width = int(screen_width * 0.5)
        window_height = int(screen_height * 0.7)
        popup.wm_geometry(f"{window_width}x{window_height}+{int((screen_width - window_width) / 2)}+{int((screen_height - window_height) / 2)}")
        popup.transient(self)
        popup.grab_set()

        students_frame = ctk.CTkFrame(popup, corner_radius=10)
        students_frame.pack(pady=10, padx=10, fill="both", expand=True)

        ctk.CTkLabel(
            students_frame,
            text="قائمة الطلاب" if self.lang == "ar" else "Student List",
            font=("Cairo" if self.lang == "ar" else "Arial", 16, "bold")
        ).pack(pady=10)

        self.student_frame = ctk.CTkScrollableFrame(students_frame, corner_radius=8)
        self.student_frame.pack(pady=10, padx=10, fill="both", expand=True)

        button_frame = ctk.CTkFrame(students_frame, corner_radius=10)
        button_frame.pack(pady=10, fill="x", padx=10)

        add_btn = ctk.CTkButton(
            button_frame,
            text="➕ إضافة طالب" if self.lang == "ar" else "➕ Add Student",
            font=("Cairo" if self.lang == "ar" else "Arial", 14),
            command=lambda: self.add_student(popup),
            fg_color="#2E7D32",
            hover_color="#4CAF50",
            corner_radius=8
        )
        add_btn.pack(side="right" if self.lang == "ar" else "left", padx=5)

        remove_btn = ctk.CTkButton(
            button_frame,
            text="🗑️ حذف طالب" if self.lang == "ar" else "🗑️ Remove Student",
            font=("Cairo" if self.lang == "ar" else "Arial", 14),
            command=lambda: self.remove_student(popup),
            fg_color="#D32F2F",
            hover_color="#F44336",
            corner_radius=8
        )
        remove_btn.pack(side="right" if self.lang == "ar" else "left", padx=5)

        save_btn = ctk.CTkButton(
            button_frame,
            text="💾 حفظ القائمة" if self.lang == "ar" else "💾 Save List",
            font=("Cairo" if self.lang == "ar" else "Arial", 14),
            command=lambda: self.save_students(popup),
            fg_color="#5E2A7E",
            hover_color="#7B1FA2",
            corner_radius=8
        )
        save_btn.pack(side="right" if self.lang == "ar" else "left", padx=5)

        self.refresh_students_display()

    def add_student(self, popup):
        name = simpledialog.askstring(
            "اسم الطالب" if self.lang == "ar" else "Student Name",
            "أدخل اسم الطالب:" if self.lang == "ar" else "Enter student name:"
        )
        if name and re.match(r"^[a-zA-Z\sأ-ي]+$", name):
            if any(s["name"] == name for s in self.students):
                messagebox.showerror(
                    "خطأ" if self.lang == "ar" else "Error",
                    "اسم الطالب موجود بالفعل." if self.lang == "ar" else "Student name already exists."
                )
                return
            self.students.append({"name": name, "grades": [], "info": ""})
            self.refresh_students_display()
            messagebox.showinfo(
                "تم" if self.lang == "ar" else "Success",
                f"تم إضافة الطالب {name} بنجاح." if

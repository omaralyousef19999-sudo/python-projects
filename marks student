import customtkinter as ctk
from tkinter import messagebox, simpledialog, Canvas
import json
import os
from datetime import datetime, timedelta
from openpyxl import Workbook
import shutil
import re
import random
import time
import pygame  # لتشغيل الصوت

# ========== إعدادات الواجهة ==========
ctk.set_appearance_mode("dark")
ctk.set_default_color_theme("blue")

DATA_FILE = "students_data.json"
BACKUP_FILE = "students_data_backup.json"
MAX_GRADES = 100
EDIT_DAYS_LIMIT = 5
FIREWORKS_SOUND = "fireworks.wav"  # اسم ملف الصوت

# ============================================================
# 🔹 دالة حفظ البيانات
# ============================================================
def save_data(data):
    try:
        if os.path.exists(DATA_FILE):
            shutil.copy(DATA_FILE, BACKUP_FILE)
        with open(DATA_FILE, "w", encoding="utf-8") as f:
            json.dump(data, f, indent=4, ensure_ascii=False)
    except Exception as e:
        messagebox.showerror("خطأ", f"فشل حفظ البيانات: {str(e)}")
        raise

# ============================================================
# 🔹 دالة تحميل البيانات
# ============================================================
def load_data():
    if not os.path.exists(DATA_FILE):
        return {"accounts": []}
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            data = json.load(f)
            if "accounts" not in data:
                data = {"accounts": [data]}  # تحويل هيكل قديم إلى جديد
            return data
    except json.JSONDecodeError:
        messagebox.showerror("خطأ", "ملف البيانات تالف. سيتم إنشاء ملف جديد.")
        return {"accounts": []}
    except Exception as e:
        messagebox.showerror("خطأ", f"فشل تحميل البيانات: {str(e)}")
        return {"accounts": []}

# ============================================================
# 🔹 دالة عرض الألعاب النارية
# ============================================================
def show_fireworks(master, lang):
    try:
        pygame.mixer.init()
        if os.path.exists(FIREWORKS_SOUND):
            pygame.mixer.music.load(FIREWORKS_SOUND)
            pygame.mixer.music.play()
        else:
            messagebox.showwarning(
                "تحذير" if lang == "ar" else "Warning",
                f"ملف الصوت {FIREWORKS_SOUND} غير موجود." if lang == "ar" else f"Sound file {FIREWORKS_SOUND} not found."
            )
    except Exception as e:
        messagebox.showerror(
            "خطأ" if lang == "ar" else "Error",
            f"فشل تشغيل الصوت: {str(e)}" if lang == "ar" else f"Failed to play sound: {str(e)}"
        )

    popup = ctk.CTkToplevel(master)
    popup.title("الألعاب النارية" if lang == "ar" else "Fireworks")
    screen_width = master.winfo_screenwidth()
    screen_height = master.winfo_screenheight()
    window_width = int(screen_width * 0.5)
    window_height = int(screen_height * 0.5)
    popup.wm_geometry(f"{window_width}x{window_height}+{int((screen_width - window_width) / 2)}+{int((screen_height - window_height) / 2)}")
    popup.transient(master)
    popup.grab_set()

    canvas = Canvas(popup, bg="black", highlightthickness=0)
    canvas.pack(fill="both", expand=True)

    particles = []
    colors = ["red", "yellow", "blue", "green", "purple", "white"]

    def create_particle():
        x = random.randint(50, window_width - 50)
        y = random.randint(50, window_height - 50)
        size = random.randint(5, 15)
        color = random.choice(colors)
        dx = random.uniform(-3, 3)
        dy = random.uniform(-3, 3)
        particle = canvas.create_oval(x, y, x + size, y + size, fill=color)
        return {"id": particle, "dx": dx, "dy": dy, "life": 50}

    def animate():
        nonlocal particles
        if len(particles) < 20:
            particles.append(create_particle())
        new_particles = []
        for p in particles:
            canvas.move(p["id"], p["dx"], p["dy"])
            p["life"] -= 1
            if p["life"] > 0:
                new_particles.append(p)
            else:
                canvas.delete(p["id"])
        particles = new_particles
        if particles:
            popup.after(50, animate)
        else:
            popup.destroy()

    for _ in range(10):
        particles.append(create_particle())
    animate()
    popup.after(3000, lambda: [pygame.mixer.music.stop(), popup.destroy()])

# ============================================================
# 🔹 واجهة إدارة الحسابات
# ============================================================
class AccountManagerWindow(ctk.CTk):
    def __init__(self, lang="ar"):
        super().__init__()
        self.title("إدارة الحسابات" if lang == "ar" else "Account Manager")
        self.lang = lang
        self.data = load_data()
        self.accounts = self.data.get("accounts", [])

        screen_width = self.winfo_screenwidth()
        screen_height = self.winfo_screenheight()
        window_width = int(screen_width * 0.8)
        window_height = int(screen_height * 0.8)
        self.wm_geometry(f"{window_width}x{window_height}+{int((screen_width - window_width) / 2)}+{int((screen_height - window_height) / 2)}")

        main_frame = ctk.CTkFrame(self, corner_radius=10)
        main_frame.pack(pady=20, padx=20, fill="both", expand=True)

        ctk.CTkLabel(
            main_frame,
            text="إدارة الحسابات" if lang == "ar" else "Manage Accounts",
            font=("Cairo" if lang == "ar" else "Arial", 24, "bold")
        ).pack(pady=15)

        self.account_frame = ctk.CTkScrollableFrame(main_frame, corner_radius=8)
        self.account_frame.pack(pady=10, fill="both", expand=True)

        button_frame = ctk.CTkFrame(main_frame, corner_radius=10)
        button_frame.pack(pady=10, fill="x", padx=10)

        lang_btn = ctk.CTkButton(
            button_frame,
            text="🇬🇧 English" if lang == "ar" else "🇸🇦 العربية",
            font=("Cairo" if lang == "ar" else "Arial", 12),
            command=self.toggle_language,
            fg_color="#0288D1",
            hover_color="#03A9F4",
            corner_radius=8
        )
        lang_btn.pack(side="right" if lang == "ar" else "left", padx=5)

        add_btn = ctk.CTkButton(
            button_frame,
            text="➕ إنشاء حساب جديد" if lang == "ar" else "➕ Create New Account",
            font=("Cairo" if lang == "ar" else "Arial", 14),
            command=self.create_new_account,
            fg_color="#2E7D32",
            hover_color="#4CAF50",
            corner_radius=8
        )
        add_btn.pack(side="right" if lang == "ar" else "left", padx=5)

        self.load_accounts()

    def load_accounts(self):
        for widget in self.account_frame.winfo_children():
            widget.destroy()

        for i, account in enumerate(self.accounts):
            row = ctk.CTkFrame(self.account_frame, corner_radius=5, fg_color="#424242")
            row.pack(fill="x", pady=5, padx=5)

            ctk.CTkLabel(
                row,
                text=f"{i+1}. {account['teacher']} - {account['institute']}",
                font=("Cairo" if self.lang == "ar" else "Arial", 14),
                anchor="w" if self.lang == "ar" else "e"
            ).pack(side="left" if self.lang == "ar" else "right", padx=10, fill="x", expand=True)

            open_btn = ctk.CTkButton(
                row,
                text="📂 فتح" if self.lang == "ar" else "📂 Open",
                width=80,
                command=lambda acc=account: self.open_account(acc)
            )
            open_btn.pack(side="right" if self.lang == "ar" else "left", padx=5)

            delete_btn = ctk.CTkButton(
                row,
                text="🗑️ حذف" if self.lang == "ar" else "🗑️ Delete",
                width=80,
                fg_color="#D32F2F",
                hover_color="#F44336",
                command=lambda idx=i: self.delete_account(idx)
            )
            delete_btn.pack(side="right" if self.lang == "ar" else "left", padx=5)

    def toggle_language(self):
        new_lang = "en" if self.lang == "ar" else "ar"
        self.destroy()
        AccountManagerWindow(new_lang).mainloop()

    def create_new_account(self):
        self.destroy()
        CreateAccountWindow(self.lang).mainloop()

    def open_account(self, account):
        self.destroy()
        StudentWindow(account, self.lang).mainloop()

    def delete_account(self, index):
        if messagebox.askyesno(
            "تأكيد" if self.lang == "ar" else "Confirm",
            "هل تريد حذف هذا الحساب؟" if self.lang == "ar" else "Do you want to delete this account?"
        ):
            del self.accounts[index]
            self.data["accounts"] = self.accounts
            save_data(self.data)
            self.load_accounts()
            messagebox.showinfo(
                "تم" if self.lang == "ar" else "Success",
                "تم حذف الحساب بنجاح." if self.lang == "ar" else "Account deleted successfully."
            )

# ============================================================
# 🔹 واجهة إنشاء الحساب
# ============================================================
class CreateAccountWindow(ctk.CTk):
    def __init__(self, lang="ar"):
        super().__init__()
        self.title("نظام المعهد - إنشاء حساب" if lang == "ar" else "Institute System - Create Account")
        self.lang = lang
        self.data = load_data()
        self.students = []

        screen_width = self.winfo_screenwidth()
        screen_height = self.winfo_screenheight()
        window_width = int(screen_width * 0.8)
        window_height = int(screen_height * 0.8)
        self.wm_geometry(f"{window_width}x{window_height}+{int((screen_width - window_width) / 2)}+{int((screen_height - window_height) / 2)}")

        main_frame = ctk.CTkFrame(self, corner_radius=10)
        main_frame.pack(pady=20, padx=20, fill="both", expand=True)

        ctk.CTkLabel(
            main_frame,
            text="إنشاء حساب أستاذ" if lang == "ar" else "Create Teacher Account",
            font=("Cairo" if lang == "ar" else "Arial", 24, "bold")
        ).pack(pady=15)

        self.name_entry = ctk.CTkEntry(
            main_frame,
            placeholder_text="اسم الأستاذ" if lang == "ar" else "Teacher Name",
            font=("Cairo" if lang == "ar" else "Arial", 14),
            corner_radius=8,
            height=40
        )
        self.name_entry.pack(pady=10, padx=40, fill="x")

        self.inst_entry = ctk.CTkEntry(
            main_frame,
            placeholder_text="اسم المعهد" if lang == "ar" else "Institute Name",
            font=("Cairo" if lang == "ar" else "Arial", 14),
            corner_radius=8,
            height=40
        )
        self.inst_entry.pack(pady=10, padx=40, fill="x")

        button_frame = ctk.CTkFrame(main_frame, corner_radius=10)
        button_frame.pack(pady=10, fill="x", padx=10)

        self.add_students_btn = ctk.CTkButton(
            button_frame,
            text="➕ إضافة الطلاب" if lang == "ar" else "➕ Add Students",
            font=("Cairo" if lang == "ar" else "Arial", 14),
            command=self.open_student_popup,
            fg_color="#2E7D32",
            hover_color="#4CAF50",
            corner_radius=8
        )
        self.add_students_btn.pack(side="right" if lang == "ar" else "left", padx=5)

        self.create_btn = ctk.CTkButton(
            button_frame,
            text="✅ إنشاء الحساب" if lang == "ar" else "✅ Create Account",
            font=("Cairo" if lang == "ar" else "Arial", 14),
            command=self.create_account,
            fg_color="#5E2A7E",
            hover_color="#7B1FA2",
            corner_radius=8
        )
        self.create_btn.pack(side="right" if lang == "ar" else "left", padx=5)

        self.manager_btn = ctk.CTkButton(
            button_frame,
            text="📋 إدارة الحسابات" if lang == "ar" else "📋 Manage Accounts",
            font=("Cairo" if lang == "ar" else "Arial", 14),
            command=self.goto_account_manager,
            fg_color="#0288D1",
            hover_color="#03A9F4",
            corner_radius=8
        )
        self.manager_btn.pack(side="right" if lang == "ar" else "left", padx=5)

        lang_btn = ctk.CTkButton(
            button_frame,
            text="🇬🇧 English" if lang == "ar" else "🇸🇦 العربية",
            font=("Cairo" if lang == "ar" else "Arial", 12),
            command=self.toggle_language,
            fg_color="#0288D1",
            hover_color="#03A9F4",
            corner_radius=8
        )
        lang_btn.pack(side="right" if lang == "ar" else "left", padx=5)

    def toggle_language(self):
        new_lang = "en" if self.lang == "ar" else "ar"
        self.destroy()
        CreateAccountWindow(new_lang).mainloop()

    def goto_account_manager(self):
        if self.data["accounts"]:
            self.destroy()
            AccountManagerWindow(self.lang).mainloop()
        else:
            messagebox.showinfo(
                "تنبيه" if self.lang == "ar" else "Alert",
                "لم يتم إنشاء أي حساب بعد." if self.lang == "ar" else "No accounts have been created yet."
            )

    def open_student_popup(self):
        popup = ctk.CTkToplevel(self)
        popup.title("إدخال أسماء الطلاب" if self.lang == "ar" else "Enter Student Names")
        screen_width = self.winfo_screenwidth()
        screen_height = self.winfo_screenheight()
        window_width = int(screen_width * 0.5)
        window_height = int(screen_height * 0.7)
        popup.wm_geometry(f"{window_width}x{window_height}+{int((screen_width - window_width) / 2)}+{int((screen_height - window_height) / 2)}")
        popup.transient(self)
        popup.grab_set()

        students_frame = ctk.CTkFrame(popup, corner_radius=10)
        students_frame.pack(pady=10, padx=10, fill="both", expand=True)

        ctk.CTkLabel(
            students_frame,
            text="قائمة الطلاب" if self.lang == "ar" else "Student List",
            font=("Cairo" if self.lang == "ar" else "Arial", 16, "bold")
        ).pack(pady=10)

        self.student_frame = ctk.CTkScrollableFrame(students_frame, corner_radius=8)
        self.student_frame.pack(pady=10, padx=10, fill="both", expand=True)

        button_frame = ctk.CTkFrame(students_frame, corner_radius=10)
        button_frame.pack(pady=10, fill="x", padx=10)

        add_btn = ctk.CTkButton(
            button_frame,
            text="➕ إضافة طالب" if self.lang == "ar" else "➕ Add Student",
            font=("Cairo" if self.lang == "ar" else "Arial", 14),
            command=lambda: self.add_student(popup),
            fg_color="#2E7D32",
            hover_color="#4CAF50",
            corner_radius=8
        )
        add_btn.pack(side="right" if self.lang == "ar" else "left", padx=5)

        remove_btn = ctk.CTkButton(
            button_frame,
            text="🗑️ حذف طالب" if self.lang == "ar" else "🗑️ Remove Student",
            font=("Cairo" if lang == "ar" else "Arial", 14),
            command=lambda: self.remove_student(popup),
            fg_color="#D32F2F",
            hover_color="#F44336",
            corner_radius=8
        )
        remove_btn.pack(side="right" if self.lang == "ar" else "left", padx=5)

        save_btn = ctk.CTkButton(
            button_frame,
            text="💾 حفظ القائمة" if self.lang == "ar" else "💾 Save List",
            font=("Cairo" if lang == "ar" else "Arial", 14),
            command=lambda: self.save_students(popup),
            fg_color="#5E2A7E",
            hover_color="#7B1FA2",
            corner_radius=8
        )
        save_btn.pack(side="right" if self.lang == "ar" else "left", padx=5)

        self.refresh_students_display()

    def add_student(self, popup):
        name = simpledialog.askstring(
            "اسم الطالب" if self.lang == "ar" else "Student Name",
            "أدخل اسم الطالب:" if self.lang == "ar" else "Enter student name:"
        )
        if name and re.match(r"^[a-zA-Z\sأ-ي]+$", name):
            if any(s["name"] == name for s in self.students):
                messagebox.showerror(
                    "خطأ" if self.lang == "ar" else "Error",
                    "اسم الطالب موجود بالفعل." if self.lang == "ar" else "Student name already exists."
                )
                return
            self.students.append({"name": name, "grades": [], "info": ""})
            self.refresh_students_display()
            messagebox.showinfo(
                "تم" if self.lang == "ar" else "Success",
                f"تم إضافة الطالب {name} بنجاح." if self.lang == "ar" else f"Student {name} added successfully."
            )
        elif name:
            messagebox.showerror(
                "خطأ" if self.lang == "ar" else "Error",
                "الاسم يجب أن يحتوي على حروف فقط." if self.lang == "ar" else "Name must contain letters only."
            )

    def remove_student(self, popup):
        name = simpledialog.askstring(
            "حذف طالب" if self.lang == "ar" else "Remove Student",
            "أدخل اسم الطالب الذي تريد حذفه:" if self.lang == "ar" else "Enter student name to remove:"
        )
        if name and any(s["name"] == name for s in self.students):
            self.students = [s for s in self.students if s["name"] != name]
            self.refresh_students_display()
            messagebox.showinfo(
                "تم" if self.lang == "ar" else "Success",
                f"تم حذف الطالب {name} بنجاح." if self.lang == "ar" else f"Student {name} removed successfully."
            )
        elif name:
            messagebox.showerror(
                "خطأ" if self.lang == "ar" else "Error",
                "اسم الطالب غير موجود." if self.lang == "ar" else "Student name not found."
            )

    def refresh_students_display(self):
        for widget in self.student_frame.winfo_children():
            widget.destroy()

        for i, student in enumerate(self.students):
            row = ctk.CTkFrame(self.student_frame, corner_radius=5, fg_color="#424242")
            row.pack(fill="x", pady=5, padx=5)
            ctk.CTkLabel(
                row,
                text=f"{i+1}. {student['name']}",
                font=("Cairo" if self.lang == "ar" else "Arial", 14),
                anchor="w" if self.lang == "ar" else "e"
            ).pack(pady=5, padx=10, fill="x")

    def save_students(self, popup):
        if not self.students:
            messagebox.showerror(
                "خطأ" if self.lang == "ar" else "Error",
                "يجب إدخال طالب واحد على الأقل." if self.lang == "ar" else "At least one student must be added."
            )
            return
        popup.destroy()
        messagebox.showinfo(
            "تم" if self.lang == "ar" else "Success",
            "تم حفظ قائمة الطلاب بنجاح ✅" if self.lang == "ar" else "Student list saved successfully ✅"
        )

    def create_account(self):
        name = self.name_entry.get().strip()
        inst = self.inst_entry.get().strip()

        if not name or not inst:
            messagebox.showerror(
                "خطأ" if self.lang == "ar" else "Error",
                "الرجاء إدخال جميع البيانات." if self.lang == "ar" else "Please enter all required fields."
            )
            return

        if not self.students:
            messagebox.showerror(
                "خطأ" if self.lang == "ar" else "Error",
                "الرجاء إضافة الطلاب أولاً." if self.lang == "ar" else "Please add students first."
            )
            return

        creation_date = datetime.now().strftime("%Y-%m-%d")
        new_account = {
            "teacher": name,
            "institute": inst,
            "created_at": creation_date,
            "students": self.students
        }

        self.data["accounts"].append(new_account)
        save_data(self.data)
        messagebox.showinfo(
            "تم" if self.lang == "ar" else "Success",
            "تم إنشاء الحساب بنجاح 🎉" if self.lang == "ar" else "Account created successfully 🎉"
        )

        self.destroy()
        AccountManagerWindow(self.lang).mainloop()

# ============================================================
# 🔹 واجهة إدارة الطلاب
# ============================================================
class StudentWindow(ctk.CTk):
    def __init__(self, account, lang="ar"):
        super().__init__()
        self.account = account
        self.lang = lang
        self.title("إدارة الطلاب" if lang == "ar" else "Manage Students")

        screen_width = self.winfo_screenwidth()
        screen_height = self.winfo_screenheight()
        window_width = int(screen_width * 0.8)
        window_height = int(screen_height * 0.8)
        self.wm_geometry(f"{window_width}x{window_height}+{int((screen_width - window_width) / 2)}+{int((screen_height - window_height) / 2)}")

        main_frame = ctk.CTkFrame(self, corner_radius=10)
        main_frame.pack(pady=20, padx=20, fill="both", expand=True)

        button_frame_top = ctk.CTkFrame(main_frame, corner_radius=10)
        button_frame_top.pack(pady=5, fill="x")

        lang_btn = ctk.CTkButton(
            button_frame_top,
            text="🇬🇧 English" if lang == "ar" else "🇸🇦 العربية",
            font=("Cairo" if lang == "ar" else "Arial", 12),
            command=self.toggle_language,
            fg_color="#0288D1",
            hover_color="#03A9F4",
            corner_radius=8
        )
        lang_btn.pack(side="right" if lang == "ar" else "left", padx=5)

        ctk.CTkLabel(
            main_frame,
            text=f"المعهد: {account['institute']}" if lang == "ar" else f"Institute: {account['institute']}",
            font=("Cairo" if lang == "ar" else "Arial", 24, "bold")
        ).pack(pady=15)

        search_frame = ctk.CTkFrame(main_frame, corner_radius=10)
        search_frame.pack(pady=10, padx=40, fill="x")

        self.search_entry = ctk.CTkEntry(
            search_frame,
            placeholder_text="ابحث عن طالب..." if lang == "ar" else "Search for a student...",
            font=("Cairo" if lang == "ar" else "Arial", 14),
            corner_radius=8,
            height=40
        )
        self.search_entry.pack(side="right" if lang == "ar" else "left", fill="x", expand=True, padx=5)

        search_btn = ctk.CTkButton(
            search_frame,
            text="🔍 بحث" if lang == "ar" else "🔍 Search",
            font=("Cairo" if lang == "ar" else "Arial", 14),
            command=self.filter_students,
            fg_color="#0288D1",
            hover_color="#03A9F4",
            corner_radius=8,
            width=100
        )
        search_btn.pack(side="right" if lang == "ar" else "left", padx=5)

        self.stats_frame = ctk.CTkFrame(main_frame, corner_radius=10, fg_color="#37474F")
        self.stats_frame.pack(pady=10, padx=40, fill="x")

        ctk.CTkLabel(
            self.stats_frame,
            text="📈 الإحصائيات" if lang == "ar" else "📈 Statistics",
            font=("Cairo" if lang == "ar" else "Arial", 16, "bold")
        ).pack(pady=5)

        self.stats_labels = {
            "count": ctk.CTkLabel(self.stats_frame, text="", font=("Cairo" if lang == "ar" else "Arial", 14)),
            "avg": ctk.CTkLabel(self.stats_frame, text="", font=("Cairo" if lang == "ar" else "Arial", 14)),
            "max": ctk.CTkLabel(self.stats_frame, text="", font=("Cairo" if lang == "ar" else "Arial", 14)),
            "min": ctk.CTkLabel(self.stats_frame, text="", font=("Cairo" if lang == "ar" else "Arial", 14)),
            "above_90": ctk.CTkLabel(self.stats_frame, text="", font=("Cairo" if lang == "ar" else "Arial", 14))
        }
        for label in self.stats_labels.values():
            label.pack(pady=2, anchor="w" if lang == "ar" else "e")

        button_frame = ctk.CTkFrame(main_frame, corner_radius=10)
        button_frame.pack(pady=10, fill="x")

        chart_btn = ctk.CTkButton(
            button_frame,
            text="📊 عرض الرسم البياني" if lang == "ar" else "📊 Show Grades Chart",
            font=("Cairo" if lang == "ar" else "Arial", 14),
            command=self.show_grades_chart,
            fg_color="#FF9800",
            hover_color="#FFB300",
            corner_radius=8
        )
        chart_btn.pack(side="right" if lang == "ar" else "left", padx=5)

        add_students_btn = ctk.CTkButton(
            button_frame,
            text="➕ إضافة طلاب" if lang == "ar" else "➕ Add Students",
            font=("Cairo" if lang == "ar" else "Arial", 14),
            command=self.open_add_students_popup,
            fg_color="#2E7D32",
            hover_color="#4CAF50",
            corner_radius=8
        )
        add_students_btn.pack(side="right" if lang == "ar" else "left", padx=5)

        export_btn = ctk.CTkButton(
            button_frame,
            text="📊 تصدير إلى Excel" if lang == "ar" else "📊 Export to Excel",
            font=("Cairo" if lang == "ar" else "Arial", 14),
            command=self.export_to_excel,
            fg_color="#5E2A7E",
            hover_color="#7B1FA2",
            corner_radius=8
        )
        export_btn.pack(side="right" if lang == "ar" else "left", padx=5)

        restart_btn = ctk.CTkButton(
            button_frame,
            text="🔄 إعادة بدء" if lang == "ar" else "🔄 Restart",
            font=("Cairo" if lang == "ar" else "Arial", 14),
            command=self.restart_students,
            fg_color="#D32F2F",
            hover_color="#F44336",
            corner_radius=8
        )
        restart_btn.pack(side="right" if lang == "ar" else "left", padx=5)

        return_btn = ctk.CTkButton(
            button_frame,
            text="⬅️ رجوع إلى إدارة الحسابات" if lang == "ar" else "⬅️ Back to Account Manager",
            font=("Cairo" if lang == "ar" else "Arial", 14),
            command=self.back_to_manager,
            fg_color="#0288D1",
            hover_color="#03A9F4",
            corner_radius=8
        )
        return_btn.pack(side="right" if lang == "ar" else "left", padx=5)

        self.table_frame = ctk.CTkScrollableFrame(main_frame, corner_radius=8)
        self.table_frame.pack(pady=10, fill="both", expand=True)

        header_frame = ctk.CTkFrame(self.table_frame, fg_color="#37474F")
        header_frame.pack(fill="x", pady=5, padx=5)
        headers = [
            ("رقم" if self.lang == "ar" else "No.", 50),
            ("الاسم" if self.lang == "ar" else "Name", 200),
            ("المجموع" if self.lang == "ar" else "Total", 100),
            ("الملاحظات" if self.lang == "ar" else "Notes", 300),
            ("إجراءات" if self.lang == "ar" else "Actions", 100)
        ]
        for text, width in headers:
            ctk.CTkLabel(
                header_frame,
                text=text,
                font=("Cairo" if self.lang == "ar" else "Arial", 14, "bold"),
                width=width
            ).pack(side="right" if self.lang == "ar" else "left", padx=5)

        self.load_students()

    def update_stats(self):
        students = self.account["students"]
        count = len(students)
        totals = [sum(s.get("grades", [])) for s in students]
        avg = sum(totals) / count if count > 0 else 0
        max_grade = max(totals) if totals else 0
        min_grade = min(totals) if totals else 0
        above_90 = sum(1 for t in totals if (t / MAX_GRADES) * 100 >= 90) if totals else 0

        stats_text = {
            "count": f"عدد الطلاب: {count}" if self.lang == "ar" else f"Number of Students: {count}",
            "avg": f"متوسط العلامات: {avg:.2f}" if self.lang == "ar" else f"Average Grade: {avg:.2f}",
            "max": f"أعلى درجة: {max_grade}" if self.lang == "ar" else f"Highest Grade: {max_grade}",
            "min": f"أدنى درجة: {min_grade}" if self.lang == "ar" else f"Lowest Grade: {min_grade}",
            "above_90": f"الطلاب فوق 90%: {above_90}" if self.lang == "ar" else f"Students above 90%: {above_90}"
        }

        for key, label in self.stats_labels.items():
            label.configure(text=stats_text[key])

    def show_grades_chart(self):
        if not self.account["students"]:
            messagebox.showerror(
                "خطأ" if self.lang == "ar" else "Error",
                "لا يوجد طلاب لعرض الرسم البياني." if self.lang == "ar" else "No students to display the chart."
            )
            return

        popup = ctk.CTkToplevel(self)
        popup.title("رسم بياني لعلامات الطلاب" if self.lang == "ar" else "Student Grades Chart")
        screen_width = self.winfo_screenwidth()
        screen_height = self.winfo_screenheight()
        window_width = int(screen_width * 0.6)
        window_height = int(screen_height * 0.5)
        popup.wm_geometry(f"{window_width}x{window_height}+{int((screen_width - window_width) / 2)}+{int((screen_height - window_height) / 2)}")
        popup.transient(self)
        popup.grab_set()

        chart_frame = ctk.CTkFrame(popup, corner_radius=10)
        chart_frame.pack(pady=20, padx=20, fill="both", expand=True)

        ctk.CTkLabel(
            chart_frame,
            text="توزيع علامات الطلاب" if self.lang == "ar" else "Distribution of Student Grades",
            font=("Cairo" if self.lang == "ar" else "Arial", 16, "bold")
        ).pack(pady=10)

        names = [s["name"] for s in self.account["students"]]
        totals = [sum(s.get("grades", [])) for s in self.account["students"]]

        ```chartjs
        {
            "type": "bar",
            "data": {
                "labels": names,
                "datasets": [{
                    "label": "مجموع العلامات" if self.lang == "ar" else "Total Grades",
                    "data": totals,
                    "backgroundColor": ["#2196F3", "#4CAF50", "#F44336", "#FF9800", "#9C27B0", "#FFEB3B"],
                    "borderColor": ["#1976D2", "#388E3C", "#D32F2F", "#F57C00", "#7B1FA2", "#FBC02D"],
                    "borderWidth": 1
                }]
            },
            "options": {
                "scales": {
                    "y": {
                        "beginAtZero": true,
                        "title": {
                            "display": true,
                            "text": "مجموع العلامات" if self.lang == "ar" else "Total Grades"
                        }
                    },
                    "x": {
                        "title": {
                            "display": true,
                            "text": "أسماء الطلاب" if self.lang == "ar" else "Student Names"
                        }
                    }
                },
                "plugins": {
                    "legend": {
                        "display": false
                    },
                    "title": {
                        "display": true,
                        "text": "توزيع علامات الطلاب" if self.lang == "ar" else "Student Grades Distribution"
                    }
                }
            }
        }
        ```

    def toggle_language(self):
        new_lang = "en" if self.lang == "ar" else "ar"
        self.destroy()
        StudentWindow(self.account, new_lang).mainloop()

    def filter_students(self):
        search_term = self.search_entry.get().strip().lower()
        filtered_students = [
            s for s in self.account["students"]
            if search_term in s["name"].lower()
        ]
        self.load_students(filtered_students if search_term else self.account["students"])

    def load_students(self, students=None):
        for widget in self.table_frame.winfo_children()[1:]:
            widget.destroy()

        students = students or self.account["students"]
        sorted_students = sorted(students, key=lambda x: sum(x.get("grades", [])), reverse=True)

        for i, student in enumerate(sorted_students):
            total = sum(student.get("grades", []))
            row = ctk.CTkFrame(self.table_frame, corner_radius=5, fg_color="#424242")
            row.pack(fill="x", pady=2, padx=5)

            rank_icon = ""
            if i == 0 and len(sorted_students) >= 1:
                rank_icon = "🥇"
            elif i == 1 and len(sorted_students) >= 2:
                rank_icon = "🥈"
            elif i == 2 and len(sorted_students) >= 3:
                rank_icon = "🥉"
            elif i == len(sorted_students) - 1 and len(sorted_students) >= 1:
                rank_icon = "🦓"

            ctk.CTkLabel(
                row,
                text=str(i+1),
                font=("Cairo" if self.lang == "ar" else "Arial", 14),
                width=50
            ).pack(side="right" if self.lang == "ar" else "left", padx=5)

            name_label = ctk.CTkLabel(
                row,
                text=f"{rank_icon} {student['name']}" if rank_icon else student["name"],
                font=("Cairo" if self.lang == "ar" else "Arial", 14),
                width=200,
                anchor="w" if self.lang == "ar" else "e"
            )
            name_label.pack(side="right" if self.lang == "ar" else "left", padx=5)
            if rank_icon == "🥇":
                name_label.configure(cursor="hand2")
                name_label.bind("<Button-1>", lambda e: show_fireworks(self, self.lang))

            ctk.CTkLabel(
                row,
                text=str(total),
                font=("Cairo" if self.lang == "ar" else "Arial", 14),
                width=100
            ).pack(side="right" if self.lang == "ar" else "left", padx=5)

            ctk.CTkLabel(
                row,
                text=student.get("info", "")[:30] + ("..." if len(student.get("info", "")) > 30 else ""),
                font=("Cairo" if self.lang == "ar" else "Arial", 14),
                width=300,
                anchor="w" if self.lang == "ar" else "e"
            ).pack(side="right" if self.lang == "ar" else "left", padx=5)

            ctk.CTkButton(
                row,
                text="✏️ تعديل" if self.lang == "ar" else "✏️ Edit",
                font=("Cairo" if self.lang == "ar" else "Arial", 14),
                width=100,
                command=lambda s=student: self.edit_student(s),
                fg_color="#0288D1",
                hover_color="#03A9F4",
                corner_radius=8
            ).pack(side="right" if self.lang == "ar" else "left", padx=5)

        self.update_stats()

    def open_add_students_popup(self):
        popup = ctk.CTkToplevel(self)
        popup.title("إدخال أسماء الطلاب" if self.lang == "ar" else "Enter Student Names")
        screen_width = self.winfo_screenwidth()
        screen_height = self.winfo_screenheight()
        window_width = int(screen_width * 0.5)
        window_height = int(screen_height * 0.7)
        popup.wm_geometry(f"{window_width}x{window_height}+{int((screen_width - window_width) / 2)}+{int((screen_height - window_height) / 2)}")
        popup.transient(self)
        popup.grab_set()

        students_frame = ctk.CTkFrame(popup, corner_radius=10)
        students_frame.pack(pady=10, padx=10, fill="both", expand=True)

        ctk.CTkLabel(
            students_frame,
            text="قائمة الطلاب" if self.lang == "ar" else "Student List",
            font=("Cairo" if self.lang == "ar" else "Arial", 16, "bold")
        ).pack(pady=10)

        student_frame = ctk.CTkScrollableFrame(students_frame, corner_radius=8)
        student_frame.pack(pady=10, padx=10, fill="both", expand=True)

        button_frame = ctk.CTkFrame(students_frame, corner_radius=10)
        button_frame.pack(pady=10, fill="x", padx=10)

        add_btn = ctk.CTkButton(
            button_frame,
            text="➕ إضافة طالب" if self.lang == "ar" else "➕ Add Student",
            font=("Cairo" if self.lang == "ar" else "Arial", 14),
            command=lambda: self.add_student(popup, student_frame),
            fg_color="#2E7D32",
            hover_color="#4CAF50",
            corner_radius=8
        )
        add_btn.pack(side="right" if self.lang == "ar" else "left", padx=5)

        remove_btn = ctk.CTkButton(
            button_frame,
            text="🗑️ حذف طالب" if self.lang == "ar" else "🗑️ Remove Student",
            font=("Cairo" if self.lang == "ar" else "Arial", 14),
            command=lambda: self.remove_student(popup, student_frame),
            fg_color="#D32F2F",
            hover_color="#F44336",
            corner_radius=8
        )
        remove_btn.pack(side="right" if self.lang == "ar" else "left", padx=5)

        save_btn = ctk.CTkButton(
            button_frame,
            text="💾 حفظ القائمة" if self.lang == "ar" else "💾 Save List",
            font=("Cairo" if self.lang == "ar" else "Arial", 14),
            command=lambda: self.save_students(popup, student_frame),
            fg_color="#5E2A7E",
            hover_color="#7B1FA2",
            corner_radius=8
        )
        save_btn.pack(side="right" if self.lang == "ar" else "left", padx=5)

        self.refresh_students_display(student_frame)

    def add_student(self, popup, student_frame):
        name = simpledialog.askstring(
            "اسم الطالب" if self.lang == "ar" else "Student Name",
            "أدخل اسم الطالب:" if self.lang == "ar" else "Enter student name:"
        )
        if name and re.match(r"^[a-zA-Z\sأ-ي]+$", name):
            if any(s["name"] == name for s in self.account["students"]):
                messagebox.showerror(
                    "خطأ" if self.lang == "ar" else "Error",
                    "اسم الطالب موجود بالفعل." if self.lang == "ar" else "Student name already exists."
                )
                return
            self.account["students"].append({"name": name, "grades": [], "info": ""})
            self.refresh_students_display(student_frame)
            messagebox.showinfo(
                "تم" if self.lang == "ar" else "Success",
                f"تم إضافة الطالب {name} بنجاح." if self.lang == "ar" else f"Student {name} added successfully."
            )
        elif name:
            messagebox.showerror(
                "خطأ" if self.lang == "ar" else "Error",
                "الاسم يجب أن يحتوي على حروف فقط." if self.lang == "ar" else "Name must contain letters only."
            )

    def remove_student(self, popup, student_frame):
        name = simpledialog.askstring(
            "حذف طالب" if self.lang == "ar" else "Remove Student",
            "أدخل اسم الطالب الذي تريد حذفه:" if self.lang == "ar" else "Enter student name to remove:"
        )
        if name and any(s["name"] == name for s in self.account["students"]):
            self.account["students"] = [s for s in self.account["students"] if s["name"] != name]
            self.refresh_students_display(student_frame)
            messagebox.showinfo(
                "تم" if self.lang == "ar" else "Success",
                f"تم حذف الطالب {name} بنجاح." if self.lang == "ar" else f"Student {name} removed successfully."
            )
        elif name:
            messagebox.showerror(
                "خطأ" if self.lang == "ar" else "Error",
                "اسم الطالب غير موجود." if self.lang == "ar" else "Student name not found."
            )

    def refresh_students_display(self, student_frame):
        for widget in student_frame.winfo_children():
            widget.destroy()

        for i, student in enumerate(self.account["students"]):
            row = ctk.CTkFrame(student_frame, corner_radius=5, fg_color="#424242")
            row.pack(fill="x", pady=5, padx=5)
            ctk.CTkLabel(
                row,
                text=f"{i+1}. {student['name']}",
                font=("Cairo" if self.lang == "ar" else "Arial", 14),
                anchor="w" if self.lang == "ar" else "e"
            ).pack(pady=5, padx=10, fill="x")

    def save_students(self, popup, student_frame):
        self.update_data()
        popup.destroy()
        self.load_students()
        self.update_stats()
        messagebox.showinfo(
            "تم" if self.lang == "ar" else "Success",
            "تم حفظ قائمة الطلاب بنجاح ✅" if self.lang == "ar" else "Student list saved successfully ✅"
        )

    def restart_students(self):
        if messagebox.askyesno(
            "تأكيد" if self.lang == "ar" else "Confirm",
            "هل تريد إعادة بدء وتفريغ قائمة الطلاب؟" if self.lang == "ar" else "Do you want to restart and clear the student list?"
        ):
            self.account["students"] = []
            self.update_data()
            self.load_students()
            self.update_stats()
            messagebox.showinfo(
                "تم" if self.lang == "ar" else "Success",
                "تم تفريغ قائمة الطلاب بنجاح." if self.lang == "ar" else "Student list cleared successfully."
            )

    def edit_student(self, student):
        creation_date = datetime.strptime(self.account["created_at"], "%Y-%m-%d")
        if datetime.now() > creation_date + timedelta(days=EDIT_DAYS_LIMIT):
            messagebox.showinfo(
                "تنبيه" if self.lang == "ar" else "Alert",
                "انتهت فترة تعديل البيانات." if self.lang == "ar" else "Editing period has expired."
            )
            return

        popup = ctk.CTkToplevel(self)
        popup.title(f"تعديل بيانات {student['name']}" if self.lang == "ar" else f"Edit {student['name']} Data")
        screen_width = self.winfo_screenwidth()
        screen_height = self.winfo_screenheight()
        window_width = int(screen_width * 0.5)
        window_height = int(screen_height * 0.7)
        popup.wm_geometry(f"{window_width}x{window_height}+{int((screen_width - window_width) / 2)}+{int((screen_height - window_height) / 2)}")
        popup.transient(self)
        popup.grab_set()

        edit_frame = ctk.CTkFrame(popup, corner_radius=10)
        edit_frame.pack(pady=20, padx=20, fill="both", expand=True)

        ctk.CTkLabel(
            edit_frame,
            text="اسم الطالب:" if self.lang == "ar" else "Student Name:",
            font=("Cairo" if self.lang == "ar" else "Arial", 14)
        ).pack(pady=5)
        name_entry = ctk.CTkEntry(
            edit_frame,
            width=400,
            font=("Cairo" if self.lang == "ar" else "Arial", 14),
            corner_radius=8,
            height=40
        )
        name_entry.insert(0, student["name"])
        name_entry.pack(pady=10)

        ctk.CTkLabel(
            edit_frame,
            text="العلامات (مفصولة بمسافة):" if self.lang == "ar" else "Grades (space-separated):",
            font=("Cairo" if self.lang == "ar" else "Arial", 14)
        ).pack(pady=5)
        grades_text = ctk.CTkEntry(
            edit_frame,
            width=400,
            font=("Cairo" if self.lang == "ar" else "Arial", 14),
            corner_radius=8,
            height=40
        )
        grades_text.insert(0, " ".join(map(str, student.get("grades", []))))
        grades_text.pack(pady=10)

        ctk.CTkLabel(
            edit_frame,
            text="ملاحظات:" if self.lang == "ar" else "Notes:",
            font=("Cairo" if self.lang == "ar" else "Arial", 14)
        ).pack(pady=5)
        info_entry = ctk.CTkTextbox(
            edit_frame,
            width=400,
            height=120,
            font=("Cairo" if self.lang == "ar" else "Arial", 14),
            corner_radius=8
        )
        info_entry.insert("end", student.get("info", ""))
        info_entry.pack(pady=10)

        def save_changes():
            new_name = name_entry.get().strip()
            if new_name and re.match(r"^[a-zA-Z\sأ-ي]+$", new_name):
                student["name"] = new_name
            else:
                messagebox.showerror(
                    "خطأ" if self.lang == "ar" else "Error",
                    "اسم الطالب غير صالح." if self.lang == "ar" else "Invalid student name."
                )
                return

            grades_str = grades_text.get().strip()
            if grades_str:
                try:
                    grades = list(map(int, grades_str.split()))
                    if any(g < 0 or g > MAX_GRADES for g in grades):
                        messagebox.showerror(
                            "خطأ" if self.lang == "ar" else "Error",
                            f"العلامات يجب أن تكون بين 0 و {MAX_GRADES}." if self.lang == "ar" else f"Grades must be between 0 and {MAX_GRADES}."
                        )
                        return
                    student["grades"] = grades
                except ValueError:
                    messagebox.showerror(
                        "خطأ" if self.lang == "ar" else "Error",
                        "يجب أن تكون العلامات أرقام صحيحة مفصولة بمسافة." if self.lang == "ar" else "Grades must be space-separated integers."
                    )
                    return
            else:
                student["grades"] = []

            student["info"] = info_entry.get("1.0", "end").strip()
            self.update_data()
            popup.destroy()
            self.load_students()
            self.update_stats()
            messagebox.showinfo(
                "تم" if self.lang == "ar" else "Success",
                "تم حفظ التغييرات بنجاح ✅" if self.lang == "ar" else "Changes saved successfully ✅"
            )

        ctk.CTkButton(
            edit_frame,
            text="💾 حفظ" if self.lang == "ar" else "💾 Save",
            font=("Cairo" if self.lang == "ar" else "Arial", 14),
            command=save_changes,
            fg_color="#5E2A7E",
            hover_color="#7B1FA2",
            corner_radius=8
        ).pack(pady=15)

    def back_to_manager(self):
        self.destroy()
        AccountManagerWindow(self.lang).mainloop()

    def update_data(self):
        full_data = load_data()
        for acc in full_data["accounts"]:
            if acc["institute"] == self.account["institute"] and acc["teacher"] == self.account["teacher"]:
                acc["students"] = self.account["students"]
                break
        save_data(full_data)

    def export_to_excel(self):
        self.attributes("-disabled", True)
        try:
            wb = Workbook()
            ws = wb.active
            ws.title = "Students"
            ws.append([
                "الاسم" if self.lang == "ar" else "Name",
                "العلامات" if self.lang == "ar" else "Grades",
                "المجموع" if self.lang == "ar" else "Total",
                "ملاحظات" if self.lang == "ar" else "Notes"
            ])

            for student in self.account["students"]:
                total = sum(student.get("grades", []))
                ws.append([
                    student["name"],
                    " ".join(map(str, student.get("grades", []))),
                    total,
                    student.get("info", "")
                ])

            wb.save("students_data.xlsx")
            messagebox.showinfo(
                "تم" if self.lang == "ar" else "Success",
                "تم تصدير البيانات إلى ملف Excel بنجاح ✅" if self.lang == "ar" else "Data exported to Excel successfully ✅"
            )
        except PermissionError:
            messagebox.showerror(
                "خطأ" if self.lang == "ar" else "Error",
                "الملف مفتوح في برنامج آخر. أغلق الملف وحاول مجدداً." if self.lang == "ar" else "File is open in another program. Close it and try again."
            )
        except Exception as e:
            messagebox.showerror(
                "خطأ" if self.lang == "ar" else "Error",
                f"حدث خطأ أثناء التصدير: {str(e)}" if self.lang == "ar" else f"Error during export: {str(e)}"
            )
        finally:
            self.attributes("-disabled", False)

# ============================================================
# 🟢 تشغيل التطبيق
# ============================================================
if __name__ == "__main__":
    data = load_data()
    if not data["accounts"]:
        CreateAccountWindow().mainloop()
    else:
        AccountManagerWindow().mainloop()
